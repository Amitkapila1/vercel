{"version":3,"file":"src_app_nifty_nifty_module_ts.js","mappings":"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","names":["Portal","attach","host","_attachedHost","this","detach","isAttached","setAttachedHost","ComponentPortal","constructor","component","viewContainerRef","injector","componentFactoryResolver","super","TemplatePortal","templateRef","context","origin","elementRef","undefined","DomPortal","element","ElementRef","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","hasAttached","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","parentNode","anchorNode","createComment","insertBefore","appendChild","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","length","destroy","create","Injector","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","index","indexOf","remove","CdkPortal","ɵfac","i0","ɵdir","selectors","TemplatePortalDirective","i","provide","useExisting","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","EventEmitter","_getRootNode","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","nodeType","ELEMENT_NODE","DOCUMENT","PortalHostDirective","PortalModule","ɵmod","ɵinj","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","close","config","block","reposition","i1","ɵprov","factory","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","push","splice","OverlayKeyboardDispatcher","_keydownListener","event","overlays","_keydownEvents","observers","keydownEvents","next","_isAttached","runOutsideAngular","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","type","slice","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","createElement","setAttribute","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","value","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","requestAnimationFrame","nextSibling","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","filter","c","subscription","takeUntil","merge","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","n","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","s","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","k","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_animationsModuleType","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","get","ApplicationRef","i5","i6","ANIMATION_MODULE_TYPE","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","CdkConnectedOverlay","_overlay","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","coerceBooleanProperty","lockPosition","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","transformOriginSelector","takeWhile","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","deps","useFactory","OverlayModule","imports","BidiModule","ScrollingModule","FullscreenOverlayContainer","platform","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","getFullscreenElement","eventName","_getEventName","fullscreenEnabled","e","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵcmp","i2","i3","matSnackBarAnimations","snackBarState","trigger","state","opacity","transition","animate","_MatSnackBarContainerBase","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","_assertNotAttached","result","_afterPortalAttached","r","_live","FIREFOX","_role","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","Array","isArray","inertElement","querySelector","liveElement","focusedElement","activeElement","HTMLElement","removeAttribute","focus","viewQuery","MatSnackBarContainer","decls","i3$1","MatSnackBarModule","CommonModule","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","_MatSnackBarBase","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","template","message","simpleSnackBarComponent","_attachSnackBarContainer","userInjector","providers","useValue","containerPortal","snackBarContainerComponent","containerRef","instance","content","userConfig","TemplateRef","$implicit","_createInjector","contentRef","observe","Breakpoints","toggle","handsetCssClass","matches","announce","_animateSnackBar","isLeft","isRight","a","i2$1","i3$2","MatSnackBar","live","breakpointObserver","parentSnackBar","defaultConfig","NiftyComponent","http","dataApi","primengConfig","vps","borderColor","scales","radius","axios","headers","ripple","stockList","stocks","getmcnifty50stocks","getnifty50smaema","getnifty5d","getnifty1m","getnifty3m","getnifty6m","getniftytoday","getniftyvix","getniftypcr","getniftysentiments","gettrendlynenifty","getnifty1yr","setInterval","data5","nestedItems","console","log","nifty50sentiments","text1","sentiments","indication","text2","err","niftyvixdata","niftyvixtime","val","values","_value","_time","lineChartvixData","label","borderWidth","fill","lineChartvixLabels","response","fetch","method","ok","json","niftypcrdata","niftypcrtime","resultData","pcr","Date","time","toLocaleTimeString","hour","minute","hour12","lineChartpcrData","maintainAspectRatio","lineChartpcrLabels","error","niftyema","niftysma","text3","text4","text5","text6","text7","nifty50stocks","companies","companyShortName","percentChange","current","symbol","nifty501yrdata","nifty501yrLabels","lineChart1yrData","lineChart1yrLabels","trackByFuntion","item","trackByFuntion1","index1","item1","trackByFuntion2","index2","item2","trackByFuntion3","index3","item3","trackByFuntion4","index4","item4","trackByFuntion5","index5","item5","trackByFuntion6","index6","item6","trackByFuntion7","index7","item7","trackByFuntion8","index8","item8","trackByFuntion9","index9","item9","trackByFuntion10","index10","item10","trackByFuntion11","index11","item11","nifty506mdata","nifty506mLabels","lineChart6mData","lineChart6mLabels","nifty503mdata","nifty503mLabels","lineChart3mData","lineChart3mLabels","val5","lineChartDatan50snrr1w","pivotLevels","pivotLevel","r1","lineChartDatan50snrr2w","r2","lineChartDatan50snrr3w","r3","lineChartDatan50snrs3w","s3","lineChartDatan50snrs2w","s2","lineChartDatan50snrs1w","s1","nifty50crossoverw","crossover","displayValue","period","nifty50indicatorsw","val1","indicators","displayName","nifty505ddata","nifty505dLabels","lineChart5dData","bordercolor","lineChart5dLabels","lineChartDatan50snrr1m","lineChartDatan50snrr2m","lineChartDatan50snrr3m","lineChartDatan50snrs1m","lineChartDatan50snrs2m","lineChartDatan50snrs3m","nifty50crossoverm","nifty50indicatorsm","nifty501mdata","nifty501mLabels","lineChart1mData","lineChart1mLabels","nifty50data","nifty50Labels","stockhcdate","lineChartDatan50snrr1","lineChartDatan50snrr2","lineChartDatan50snrr3","lineChartDatan50snrs1","lineChartDatan50snrs2","lineChartDatan50snrs3","nifty50indicators","nifty50crossover","lineChartData","lineChartLabels","changestockpage","stockisin","isin","Window","me","path","K","H","Dt","j","_","Ce","ve","ct","P","$","Pt","dt","xe","be"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2020/portal.mjs","./node_modules/@angular/cdk/fesm2020/overlay.mjs","./node_modules/@angular/material/fesm2020/snack-bar.mjs","./src/app/nifty/nifty.component.html","./src/app/nifty/nifty.component.ts","./src/app/nifty/nifty-routing.module.ts","./src/app/nifty/nifty.module.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTemplatePortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n        {\n            provide: CdkPortal,\n            useExisting: TemplatePortalDirective,\n        },\n    ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortalOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPortalHostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n        {\n            provide: CdkPortalOutlet,\n            useExisting: PortalHostDirective,\n        },\n    ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n}\nPortalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPortalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\nPortalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: PortalModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\n_MatSnackBarContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSnackBarContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n","\r\n<div class=\"InsideContent\">\r\n  <div class=\"col-lg-7 grid-margin stretch-card\">\r\n    <div class=\"content card\">\r\n      <h4 class=\"mb-5\">Daily Technical Indicators</h4>\r\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n        <div fxFlex=\"25\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let tile of nifty50indicators trackBy: trackByFuntion\">\r\n          <mat-card class=\"text-blue type1-bold cardbear grid-margin stretch-card\"\r\n          [ngClass]=\"{'bg-gradient-bull':tile.text3 === 'Bullish',\r\n                      'bg-gradient-bull1':tile.text3 === 'Oversold',\r\n                      'bg-gradient-bull2':tile.text3 === 'Strong Trend',\r\n                      'bg-gradient-bull3':tile.text3 === 'High Volatility',\r\n                      'bg-gradient-bear':tile.text3 === 'Bearish',\r\n                      'bg-gradient-bear1':tile.text3 === 'Overbought',\r\n                      'bg-gradient-bear2':tile.text3 === 'Weak Trend',\r\n                      'bg-gradient-bear3':tile.text3 === 'Low Volatility',\r\n                      'bg-gradient-warning':tile.text3 === 'Neutral'}\">{{tile.text2}}<br>{{tile.text3}}\r\n          </mat-card>\r\n         \r\n        </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"InsideContent1\">\r\n    <div class=\"col-lg-13 grid-margin stretch-card\">\r\n      <div class=\"content card\">\r\n        \r\n        <h4 class=\"mb-4\">Crossover</h4>\r\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n          <div fxFlex=\"30\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let tile of nifty50crossover trackBy: trackByFuntion1\">\r\n            <mat-card class=\"text-blue type1-bold cardbear grid-margin stretch-card\"\r\n            [ngClass]=\"{'bg-gradient-bull':tile.text3 === 'Bullish',\r\n                        'bg-gradient-bull1':tile.text3 === 'Oversold',\r\n                        'bg-gradient-bull2':tile.text3 === 'Strong Trend',\r\n                        'bg-gradient-bull3':tile.text3 === 'High Volatility',\r\n                        'bg-gradient-bear':tile.text3 === 'Bearish',\r\n                        'bg-gradient-bear1':tile.text3 === 'Overbought',\r\n                        'bg-gradient-bear2':tile.text3 === 'Weak Trend',\r\n                        'bg-gradient-bear3':tile.text3 === 'Low Volatility',\r\n                        'bg-gradient-warning':tile.text3 === 'Neutral'}\">{{tile.text2}}<br>{{tile.text3}}\r\n            </mat-card>\r\n           \r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    \r\n    <div class=\"col-lg-13 grid-margin stretch-card\">\r\n      <div class=\"content card\">\r\n        \r\n        <h4 class=\"mb-4\">Sentiment</h4>\r\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n          <div fxFlex=\"30\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let tile of nifty50sentiments trackBy: trackByFuntion2\">\r\n            <mat-card class=\"text-blue type1-bold cardbear grid-margin stretch-card\"\r\n            [ngClass]=\"{'bg-gradient-bull':tile.text1 === 'Bullish',\r\n                        'bg-gradient-bull1':tile.text1 === 'Very Bullish',\r\n                        'bg-gradient-bear':tile.text1 === 'Bearish',\r\n                        'bg-gradient-bear1':tile.text1 === 'Very Bearish',\r\n                        'bg-gradient-warning':tile.text1 === 'Neutral'}\">{{tile.text2}}<br>{{tile.text1}}\r\n            </mat-card>\r\n           \r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n    <div class=\"col-lg-12 stretch-card\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n         \r\n          <div class=\"table-responsive pt-3\">\r\n            <table class=\"table table-bordered\" *ngFor=\"let tile of niftyema trackBy: trackByFuntion3\" >\r\n              <thead>\r\n                <tr>\r\n                 \r\n                 <th>\r\n                    EMA5\r\n                  </th>\r\n                  <th>\r\n                    EMA10\r\n                  </th>\r\n                  <th>\r\n                    EMA20\r\n                  </th>\r\n                  <th>\r\n                    EMA30\r\n                  </th>\r\n                  <th>\r\n                    EMA50\r\n                  </th>\r\n                  <th>\r\n                    EMA100\r\n                  </th>\r\n                  <th>\r\n                    EMA200\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr class=\"table-success\">\r\n                  <td>\r\n                   {{tile.text1| number : '1.2-2'}} \r\n                  </td>\r\n                  <td>\r\n                    {{tile.text2| number : '1.2-2'}} \r\n                   </td>\r\n                   <td>\r\n                    {{tile.text3| number : '1.2-2'}} \r\n                   </td>\r\n                   <td>\r\n                    {{tile.text4| number : '1.2-2'}} \r\n                   </td>\r\n                   <td>\r\n                    {{tile.text5| number : '1.2-2'}} \r\n                   </td>\r\n                   <td>\r\n                    {{tile.text6| number : '1.2-2'}} \r\n                   </td>\r\n                   <td>\r\n                    {{tile.text7| number : '1.2-2'}} \r\n                   </td>\r\n                </tr>\r\n                \r\n              </tbody>\r\n            </table>\r\n            <div class=\"col-lg-12 stretch-card\">\r\n      \r\n              <div class=\"table-responsive pt-3\">\r\n                <table class=\"table table-bordered\" *ngFor=\"let tile of niftysma trackBy: trackByFuntion4\" >\r\n                  <thead>\r\n                    <tr>\r\n                     \r\n                     <th>\r\n                        SMA5\r\n                      </th>\r\n                      <th>\r\n                        SMA10\r\n                      </th>\r\n                      <th>\r\n                        SMA20\r\n                      </th>\r\n                      <th>\r\n                        SMA30\r\n                      </th>\r\n                      <th>\r\n                        SMA50\r\n                      </th>\r\n                      <th>\r\n                        SMA100\r\n                      </th>\r\n                      <th>\r\n                        SMA200\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr class=\"table-danger\">\r\n                      <td>\r\n                       {{tile.text1| number : '1.2-2'}} \r\n                      </td>\r\n                      <td>\r\n                        {{tile.text2| number : '1.2-2'}} \r\n                       </td>\r\n                       <td>\r\n                        {{tile.text3| number : '1.2-2'}} \r\n                       </td>\r\n                       <td>\r\n                        {{tile.text4| number : '1.2-2'}} \r\n                       </td>\r\n                       <td>\r\n                        {{tile.text5| number : '1.2-2'}} \r\n                       </td>\r\n                       <td>\r\n                        {{tile.text6| number : '1.2-2'}} \r\n                       </td>\r\n                       <td>\r\n                        {{tile.text7| number : '1.2-2'}} \r\n                       </td>\r\n                    </tr>\r\n                    \r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n           \r\n        </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  \r\n    <div class=\"col-lg-15 grid-margin stretch-card \">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\" >\r\n          <h4 class=\"mb-5\">NIFTY - Today</h4>\r\n          <div style=\"display: block\" ></div>\r\n          <canvas baseChart height=\"100\" [type]=\"lineChartType\" [datasets]=\"lineChartData\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" ></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"col-lg-15 grid-margin stretch-card \">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\" >\r\n          PCR\r\n          <canvas baseChart height=\"50\" [type]=\"lineChartType\" [datasets]=\"lineChartpcrData\" [labels]=\"lineChartpcrLabels\" [options]=\"lineChartOptions\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n       \r\n    \r\n    <div class=\"col-lg-15 grid-margin stretch-card \">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\" >\r\n          VIX\r\n          <canvas baseChart height=\"50\" [type]=\"lineChartType\" [datasets]=\"lineChartvixData\" [labels]=\"lineChartvixLabels\" [options]=\"lineChartOptions\"></canvas>\r\n       </div>\r\n      </div>\r\n    </div>\r\n\r\n \r\n\r\n<p-tabView>\r\n    \r\n  <p-tabPanel header=\"5 days\">\r\n      <div class=\"InsideContent\">\r\n        <div class=\"col-lg-7 grid-margin stretch-card\">\r\n          <div class=\"content card\">\r\n            <h4 class=\"mb-5\">Weekly Technical Indicators</h4>\r\n            <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n              <div fxFlex=\"25\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let tile of nifty50indicatorsw trackBy: trackByFuntion5\">\r\n                <mat-card class=\"text-blue type1-bold cardbear grid-margin stretch-card\"\r\n                [ngClass]=\"{'bg-gradient-bull':tile.text3 === 'Bullish',\r\n                            'bg-gradient-bull1':tile.text3 === 'Oversold',\r\n                            'bg-gradient-bull2':tile.text3 === 'Strong Trend',\r\n                            'bg-gradient-bull3':tile.text3 === 'High Volatility',\r\n                            'bg-gradient-bear':tile.text3 === 'Bearish',\r\n                            'bg-gradient-bear1':tile.text3 === 'Overbought',\r\n                            'bg-gradient-bear2':tile.text3 === 'Weak Trend',\r\n                            'bg-gradient-bear3':tile.text3 === 'Low Volatility',\r\n                            'bg-gradient-warning':tile.text3 === 'Neutral'}\">{{tile.text2}}<br>{{tile.text3}}\r\n                </mat-card>\r\n               \r\n              </div>\r\n            </div>\r\n            </div>\r\n          </div>\r\n         \r\n          <div class=\"col-lg-13 grid-margin stretch-card\">\r\n            <div class=\"content card\">\r\n              \r\n              <h4 class=\"mb-4\">Crossover</h4>\r\n              <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n                <div fxFlex=\"30\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let tile of nifty50crossoverw trackBy: trackByFuntion6\">\r\n                  <mat-card class=\"text-blue type1-bold cardbear grid-margin stretch-card\"\r\n                  [ngClass]=\"{'bg-gradient-bull':tile.text3 === 'Bullish',\r\n                              'bg-gradient-bull1':tile.text3 === 'Oversold',\r\n                              'bg-gradient-bull2':tile.text3 === 'Strong Trend',\r\n                              'bg-gradient-bull3':tile.text3 === 'High Volatility',\r\n                              'bg-gradient-bear':tile.text3 === 'Bearish',\r\n                              'bg-gradient-bear1':tile.text3 === 'Overbought',\r\n                              'bg-gradient-bear2':tile.text3 === 'Weak Trend',\r\n                              'bg-gradient-bear3':tile.text3 === 'Low Volatility',\r\n                              'bg-gradient-warning':tile.text3 === 'Neutral'}\">{{tile.text2}}<br>{{tile.text3}}\r\n                  </mat-card>\r\n                 \r\n                </div>\r\n              </div>\r\n              </div>\r\n            </div>\r\n          \r\n        </div>\r\n      \r\n      \r\n    <div class=\"col-lg-15 grid-margin  stretch-card\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <h4 class=\"mb-5\">NIFTY50 - 1 Week</h4>\r\n          <canvas baseChart height=\"100\" [type]=\"lineChartType\" [datasets]=\"lineChart5dData\" [labels]=\"lineChart5dLabels\" [options]=\"lineChartOptions\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n  </p-tabPanel>\r\n  <p-tabPanel header=\"1 month\">\r\n    <div class=\"InsideContent\">\r\n      <div class=\"col-lg-7 grid-margin stretch-card\">\r\n        <div class=\"content card\">\r\n          <h4 class=\"mb-5\">Weekly Technical Indicators</h4>\r\n          <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n            <div fxFlex=\"25\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let tile of nifty50indicatorsm trackBy: trackByFuntion8\">\r\n              <mat-card class=\"text-blue type1-bold cardbear grid-margin stretch-card\"\r\n              [ngClass]=\"{'bg-gradient-bull':tile.text3 === 'Bullish',\r\n                          'bg-gradient-bull1':tile.text3 === 'Oversold',\r\n                          'bg-gradient-bull2':tile.text3 === 'Strong Trend',\r\n                          'bg-gradient-bull3':tile.text3 === 'High Volatility',\r\n                          'bg-gradient-bear':tile.text3 === 'Bearish',\r\n                          'bg-gradient-bear1':tile.text3 === 'Overbought',\r\n                          'bg-gradient-bear2':tile.text3 === 'Weak Trend',\r\n                          'bg-gradient-bear3':tile.text3 === 'Low Volatility',\r\n                          'bg-gradient-warning':tile.text3 === 'Neutral'}\">{{tile.text2}}<br>{{tile.text3}}\r\n              </mat-card>\r\n             \r\n            </div>\r\n          </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-lg-13 grid-margin stretch-card\">\r\n          <div class=\"content card\">\r\n            \r\n            <h4 class=\"mb-4\">Crossover</h4>\r\n            <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n              <div fxFlex=\"30\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\"  *ngFor=\"let tile of nifty50crossoverm trackBy: trackByFuntion9\">\r\n                <mat-card class=\"text-blue type1-bold cardbear grid-margin stretch-card\"\r\n                [ngClass]=\"{'bg-gradient-bull':tile.text3 === 'Bullish',\r\n                            'bg-gradient-bull1':tile.text3 === 'Oversold',\r\n                            'bg-gradient-bull2':tile.text3 === 'Strong Trend',\r\n                            'bg-gradient-bull3':tile.text3 === 'High Volatility',\r\n                            'bg-gradient-bear':tile.text3 === 'Bearish',\r\n                            'bg-gradient-bear1':tile.text3 === 'Overbought',\r\n                            'bg-gradient-bear2':tile.text3 === 'Weak Trend',\r\n                            'bg-gradient-bear3':tile.text3 === 'Low Volatility',\r\n                            'bg-gradient-warning':tile.text3 === 'Neutral'}\">{{tile.text2}}<br>{{tile.text3}}\r\n                </mat-card>\r\n               \r\n              </div>\r\n            </div>\r\n            </div>\r\n          </div>\r\n        \r\n        \r\n      </div>\r\n    \r\n    \r\n    \r\n  \r\n      \r\n    <div class=\"col-lg-15 grid-margin  stretch-card\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <h4 class=\"mb-5\">NIFTY50 - 1 Month</h4>\r\n          <canvas baseChart height=\"100\"  [datasets]=\"lineChart1mData\" [labels]=\"lineChart1mLabels\" [type]=\"lineChartType\" [options]=\"lineChartOptions\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n  </p-tabPanel>\r\n  \r\n  <p-tabPanel header=\"3months\">\r\n    <div class=\"col-lg-15 grid-margin  stretch-card\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\" >\r\n          <h4 class=\"mb-5\">NIFTY - 3 months</h4>\r\n          <canvas baseChart height=\"100\"  [datasets]=\"lineChart3mData\" [labels]=\"lineChart3mLabels\" [type]=\"lineChartType\" [options]=\"lineChartOptions\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n  </p-tabPanel>\r\n  <p-tabPanel header=\"6 months\">\r\n    <div class=\"col-lg-15 grid-margin  stretch-card\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <h4 class=\"mb-5\">NIFTY50 - 6 Months</h4>\r\n          <canvas baseChart height=\"100\"  [datasets]=\"lineChart6mData\" [labels]=\"lineChart6mLabels\" [type]=\"lineChartType\" [options]=\"lineChartOptions\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </p-tabPanel>\r\n  <p-tabPanel header=\"1 Year\">\r\n    <div class=\"col-lg-15 grid-margin  stretch-card\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <h4 class=\"mb-5\">NIFTY - 1 Year </h4>\r\n          <canvas baseChart height=\"100\"  [datasets]=\"lineChart1yrData\" [labels]=\"lineChart1yrLabels\" [type]=\"lineChartType\" [options]=\"lineChartOptions\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n  </p-tabPanel>\r\n  </p-tabView>\r\n  \r\n   \r\n  \r\n  \r\n  \r\n    \r\n  <div class=\"col-lg-15 grid-margin stretch-card\">\r\n    <div class=\"content card\">\r\n      <h4 class=\"card-title\">NIFTY50 Stocks</h4>\r\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"16px grid\">\r\n        <div fxFlex=\"15%\" fxFlex.xs=\"100%\" fxFlex.sm=\"33%\" class=\"text-white\"  *ngFor=\"let tile of nifty50stocks trackBy: trackByFuntion11\">\r\n          <mat-card [ngClass]=\"{'bg-gradient-bull text-white mat-elevation-z4' : tile.text3 > 0 , 'bg-gradient-bear text-white mat-elevation-z4': 0 > tile.text3}\"  >\r\n          \r\n              <h5>{{tile.text1}}</h5>\r\n              {{tile.text4}}<br>{{tile.text2}}&nbsp;({{tile.text3}}%)\r\n            <mat-card-actions>\r\n              <button mat-button (click)=\"changestockpage(tile.text5)\" >Graph</button>\r\n            </mat-card-actions>\r\n          </mat-card>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n    \r\n   ","import { Component, OnInit,ViewChild, Injectable } from '@angular/core';\r\nimport { DataapiService } from '../../dataapi.service'\r\nimport { PrimeNGConfig } from 'primeng/api';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\nimport { ChartConfiguration, ChartEvent, ChartType } from 'chart.js';\r\nimport { BaseChartDirective } from 'ng2-charts';\r\n\r\nimport { of } from 'rxjs'; \r\nimport { map } from 'rxjs/operators';\r\nimport {Observable} from 'rxjs'\r\nimport axios from 'axios';\r\nimport {from} from 'rxjs';\r\nimport { ViewportScroller } from '@angular/common';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport * as  stocks from '../lists/stocklist'\r\n//import { StockChart } from 'angular-highcharts';\r\nimport {ChartOptions } from 'chart.js';\r\n\r\nexport interface nifty50stockstiles {\r\n\r\n  text1: string;\r\n  text2: string;\r\n  text3: string;\r\n  text4: string;\r\n  text5: string;\r\n  \r\n}\r\nexport interface stockhcdatatile{\r\n  x: number;\r\n  y: number;\r\n}\r\nexport interface nifty50crossovertile {\r\n\r\n  text1: any;\r\n  text2: any;\r\n  text3: any;\r\n  text4: any;\r\n  \r\n}\r\nexport interface nifty50crossoverwtile {\r\n\r\n  text1: any;\r\n  text2: any;\r\n  text3: any;\r\n  text4: any;\r\n  \r\n}\r\nexport interface nifty50crossovermtile {\r\n\r\n  text1: any;\r\n  text2: any;\r\n  text3: any;\r\n  text4: any;\r\n  \r\n}\r\nexport interface nifty50indicatorstile{\r\n  text1: string;\r\n  text2: string;\r\n  text3: string;\r\n  text4: string;\r\n \r\n}\r\nexport interface nifty50indicatorswtile{\r\n  text1: string;\r\n  text2: string;\r\n  text3: string;\r\n  text4: string;\r\n \r\n}\r\nexport interface nifty50indicatorsmtile{\r\n  text1: string;\r\n  text2: string;\r\n  text3: string;\r\n  text4: string;\r\n \r\n}\r\nexport interface nifty50sentimentstiles\r\n{\r\n    text1: string;\r\n  text2: string;\r\n}\r\n\r\nexport interface nifty50bbtile{\r\n  text1: string;\r\n  text2: string;\r\n  \r\n \r\n}\r\nexport interface niftyematile{\r\n  text1: string;\r\n  text2: string;\r\n  text3: string;\r\n  text4: string;\r\n  text5: string;\r\n  text6: string;\r\n  text7: string;\r\n}\r\nexport interface niftysmatile{\r\n  text1: string;\r\n  text2: string;\r\n  text3: string;\r\n  text4: string;\r\n  text5: string;\r\n  text6: string;\r\n  text7: string;\r\n  \r\n \r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-nifty',\r\n  templateUrl: './nifty.component.html',\r\n  styleUrls: ['./nifty.component.scss']\r\n})\r\nexport class NiftyComponent implements OnInit {\r\n \r\n  constructor(private http: HttpClient, private dataApi: DataapiService, private window: Window, private primengConfig: PrimeNGConfig, private vps: ViewportScroller) {\r\n    \r\n    const instance = axios.create({\r\n      //baseURL: 'https://www.nseindia.com/',\r\n     // timeout: 1000,\r\n     headers: {'Access-Control-Allow-Origin': '*'}\r\n    });\r\n  }\r\n  \r\n  //stockhighcharts: StockChart;\r\n  public stockhcdate: Array<any> = [];\r\n  public nifty50data: Array<number> = [];\r\n  public nifty50Labels: Array<any> = [];\r\n  public niftypcrdata: Array<number> = [];\r\n  public niftypcrtime: Array<any> = [];\r\n  public niftyvixdata: Array<number> = [];\r\n  public niftyvixtime: Array<any> = [];\r\n  public lineChartData: Array<any> = [];\r\n  public lineChartLabels: Array<number> = [];\r\n  \r\n \r\n  public nifty505ddata: Array<number> = [];\r\n  public nifty505dLabels: Array<any> = [];\r\n  public lineChart5dData: Array<any> = [];\r\n  public lineChart5dLabels: Array<number> = [];\r\n  public nifty501mdata: Array<number> = [];\r\n  public nifty501mLabels: Array<any> = [];\r\n  public lineChart1mData: Array<any> = [];\r\n  public lineChart1mLabels: Array<number> = [];\r\n  public nifty503mdata: Array<number> = [];\r\n  public nifty503mLabels: Array<any> = [];\r\n  public lineChart3mData: Array<any> = [];\r\n  public lineChart3mLabels: Array<number> = [];\r\n  public nifty506mdata: Array<number> = [];\r\n  public nifty506mLabels: Array<any> = [];\r\n  public lineChart6mData: Array<any> = [];\r\n  public lineChart6mLabels: Array<number> = [];\r\n  public nifty501yrdata: Array<number> = [];\r\n  public nifty501yrLabels: Array<any> = [];\r\n  public lineChart1yrData: Array<any> = [];\r\n  public lineChart1yrLabels: Array<number> = [];\r\n  public lineChartpcrData: Array<any> = [];\r\n  public lineChartpcrLabels: Array<number> = [];\r\n  public lineChartpcrOptions: any;\r\n  public lineChartvixData: Array<any> = [];\r\n  public lineChartvixLabels: Array<number> = [];\r\n  public lineChartvixOptions: any;\r\n  \r\n  basicData: any;\r\n  basicOptions: any;\r\n  basicData1: any;\r\n  basicOptions1: any;\r\n  chart: any;\r\n  date: any;\r\n  stockisin: any;\r\n  //tlid:any\r\n  tlid = '1887';\r\n  tlname = 'NIFTY50';\r\n  eqsymbol='nifty-50'\r\n  nifty50sentiments: nifty50sentimentstiles[] = [];\r\n  \r\n  nifty50stocks: nifty50stockstiles[] = [];\r\n  nifty50crossover: nifty50crossovertile[] = [];\r\n  nifty50crossoverw: nifty50crossoverwtile[] = [];\r\n  nifty50crossoverm: nifty50crossovermtile[] = [];\r\n  nifty50indicators: nifty50indicatorstile[] = [];\r\n  nifty50indicatorsw: nifty50indicatorswtile[] = [];\r\n  nifty50indicatorsm: nifty50indicatorsmtile[] = [];\r\n  nifty50bb: nifty50bbtile[] = [];\r\n  niftyema: niftyematile[] = [];\r\n  niftysma: niftysmatile[] = [];\r\n \r\n  public lineChartDatan50snrr1: Array<number> = [];\r\n  public lineChartDatan50snrr2: Array<number> = [];\r\n  public lineChartDatan50snrr3: Array<number> = [];\r\n  public lineChartDatan50snrs1: Array<number> = [];\r\n  public lineChartDatan50snrs2: Array<number> = [];\r\n  public lineChartDatan50snrs3: Array<number> = [];\r\n  public lineChartLabelsn50snrr1: Array<any> = [];\r\n  public lineChartLabelsn50nrr3: Array<any> = [];\r\n  public lineChartLabelsn50snrr2: Array<any> = [];\r\n  public lineChartLabelsn50snrs1: Array<any> = [];\r\n  public lineChartLabelsn50snrs2: Array<any> = [];\r\n  public lineChartLabelsn50snrs3: Array<any> = [];\r\n  public lineChartDatan50snrr1w: Array<number> = [];\r\n  public lineChartDatan50snrr2w: Array<number> = [];\r\n  public lineChartDatan50snrr3w: Array<number> = [];\r\n  public lineChartDatan50snrs1w: Array<number> = [];\r\n  public lineChartDatan50snrs2w: Array<number> = [];\r\n  public lineChartDatan50snrs3w: Array<number> = [];\r\n  public lineChartLabelsn50snrr1w: Array<any> = [];\r\n  public lineChartLabelsn50nrr3w: Array<any> = [];\r\n  public lineChartLabelsn50snrr2w: Array<any> = [];\r\n  public lineChartLabelsn50snrs1w: Array<any> = [];\r\n  public lineChartLabelsn50snrs2w: Array<any> = [];\r\n  public lineChartLabelsn50snrs3w: Array<any> = [];\r\n  public lineChartDatan50snrr1m: Array<number> = [];\r\n  public lineChartDatan50snrr2m: Array<number> = [];\r\n  public lineChartDatan50snrr3m: Array<number> = [];\r\n  public lineChartDatan50snrs1m: Array<number> = [];\r\n  public lineChartDatan50snrs2m: Array<number> = [];\r\n  public lineChartDatan50snrs3m: Array<number> = [];\r\n  public lineChartLabelsn50snrr1m: Array<any> = [];\r\n  public lineChartLabelsn50nrr3m: Array<any> = [];\r\n  public lineChartLabelsn50snrr2m: Array<any> = [];\r\n  public lineChartLabelsn50snrs1m: Array<any> = [];\r\n  public lineChartLabelsn50snrs2m: Array<any> = [];\r\n  public lineChartLabelsn50snrs3m: Array<any> = [];\r\n  basicData3: any;\r\n  basicOptions3: any;\r\n  stockList: any\r\n  public  lineChartColors = [\r\n    {\r\n      borderColor: '#2d0365'\r\n    }\r\n  ];\r\n  \r\n  public lineChartType: ChartType = 'line';\r\n  public lineChartOptions:ChartOptions = {\r\n    scales: {\r\n      \r\n    },\r\n   \r\n    \r\n    elements: {\r\n      point: {\r\n        radius: 0\r\n      }\r\n    }\r\n   \r\n  };\r\n \r\n \r\n\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n           \r\n\r\n\r\n     \r\n    this.primengConfig.ripple = true;\r\n    this.stockList = stocks.default.Data\r\n    this.getmcnifty50stocks();\r\n    this.getnifty50smaema();\r\n    this.getnifty5d();\r\n    this.getnifty1m();\r\n    this.getnifty3m();\r\n    this.getnifty6m();\r\n    this.getniftytoday()\r\n    this.getniftyvix()\r\n    this.getniftypcr()\r\n    this.getniftysentiments()\r\n    this.gettrendlynenifty()\r\n    this.getnifty1yr();\r\n    this.getniftytoday();\r\n    setInterval(() => { this.getnifty50smaema() }, 30000);\r\n    setInterval(() => { this.getmcnifty50stocks()}, 30000);\r\n    setInterval(() => { this.getniftyvix() }, 30000);\r\n     setInterval(() => { this.getniftypcr()}, 30000);\r\n    \r\n    setInterval(() => { this.getniftytoday() }, 30000);\r\n\r\n  \r\n  }\r\n  \r\n  gettrendlynenifty() {\r\n    this.dataApi.gettrendlynenifty().subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n   \r\n      console.log(nestedItems);\r\n     })\r\n  \r\n       \r\n   \r\n  }\r\n  \r\n  getniftysentiments() {\r\n    this.nifty50sentiments.length = 0;\r\n    this.http.get('https://priceapi.moneycontrol.com/pricefeed/techindicator/D/in%3BNSX?field=RSI').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      \r\n      this.nifty50sentiments.push({ text1: nestedItems[2]['sentiments']['indication'],text2:\"Daily\"})\r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n\r\n      this.http.get('https://priceapi.moneycontrol.com/pricefeed/techindicator/W/in%3BNSX?field=RSI').subscribe(data5 => {\r\n        let nestedItems = Object.keys(data5).map(key => {\r\n          return data5[key];\r\n        });\r\n        \r\n    this.nifty50sentiments.push({ text1: nestedItems[2]['sentiments']['indication'],text2:\"Weekly\"}) \r\n     \r\n  }, err => {\r\n    console.log(err)\r\n  })\r\n    this.http.get('https://priceapi.moneycontrol.com/pricefeed/techindicator/M/in%3BNSX?field=RSI').subscribe(data5 => {\r\n    let nestedItems = Object.keys(data5).map(key => {\r\n    return data5[key];\r\n    });\r\n    \r\n      \r\n      this.nifty50sentiments.push({ text1: nestedItems[2]['sentiments']['indication'],text2:\"Monthly\"})\r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n  \r\n  getniftyvix() {\r\n    this.http.get('https://appfeeds.moneycontrol.com/jsonapi/market/graph&format=json&ind_id=36&range=1d&type=area').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      \r\n        /////////////////////Nifty Vix/////////////////////////////////\r\n        this.niftyvixdata.length = 0;\r\n        this.niftyvixtime.length = 0;\r\n        for (let val in nestedItems[1]['values']) {\r\n          this.niftyvixdata.push(nestedItems[1]['values'][val]['_value'])\r\n          this.niftyvixtime.push(nestedItems[1]['values'][val]['_time'])\r\n        }\r\n        \r\n        this.lineChartvixData = [{\r\n          label: 'VIX',\r\n          data: this.niftyvixdata,\r\n          borderWidth: 1,\r\n          fill: false\r\n        }];\r\n  \r\n        this.lineChartvixLabels = this.niftyvixtime;\r\n      \r\n      }, err => {\r\n        console.log(err)\r\n      })\r\n  }  \r\n  async getniftypcr() {\r\n    try {\r\n      const response = await fetch(\"https://api.niftytrader.in/api/FinNiftyOI/niftypcrData?reqType=niftypcr\", {\r\n        \"method\": \"GET\",\r\n        \"headers\": {}\r\n      });\r\n    \r\n      if (response.ok) {\r\n         const result = await response.json();\r\n        console.log(result);\r\n       \r\n       /////////////////////NIfty PCR from niftytraders////////////////////\r\n       this.niftypcrdata.length = 0;\r\n       this.niftypcrtime.length = 0;\r\n       for (let val in result['resultData']['data']) {\r\n         this.niftypcrdata.push(result['resultData']['data'][val]['pcr'])\r\n         this.niftypcrtime.push(new Date(result['resultData']['data'][val]['time']).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false }))\r\n       }\r\n      \r\n       this.lineChartpcrData = [{\r\n        label: 'PCR',\r\n        data: this.niftypcrdata,\r\n        borderWidth: 1,\r\n         fill: false,\r\n         maintainAspectRatio: false\r\n      }];\r\n\r\n      this.lineChartpcrLabels = this.niftypcrtime;\r\n    }\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n   \r\n  }\r\n  getnifty50smaema() {\r\n    this.http.get('https://mo.streak.tech/api/tech_analysis/?timeFrame=day&stock=INDICES%3ANIFTY%2050').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      /////////////////////////////EMA/SMA from Kite //////////////////////\r\n    \r\n      this.niftyema.length = 0;\r\n      this.niftysma.length = 0;\r\n\r\n      this.niftyema.push({ text1: nestedItems[10], text2: nestedItems[5], text3: nestedItems[7], text4: nestedItems[9], text5: nestedItems[11], text6: nestedItems[6], text7: nestedItems[8] })\r\n      this.niftysma.push({ text1: nestedItems[37], text2: nestedItems[32], text3: nestedItems[34], text4: nestedItems[36], text5: nestedItems[38], text6: nestedItems[33], text7: nestedItems[35] })\r\n\r\n     \r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n \r\n \r\n \r\n  getmcnifty50stocks() {\r\n    this.http.get('https://etmarketsapis.indiatimes.com/ET_Stats/getIndexByIds?pagesize=50&exchange=50&sortby=percentChange&sortorder=desc&indexid=2369&company=true&indexname=Nifty%2050&marketcap=&pageno=1').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      \r\n\r\n        //////////////////////////////Nifty 50 Stocks ////////////////////////\r\n      this.nifty50stocks.length = 0;\r\n      console.log(nestedItems)\r\n        for (let val in nestedItems[0][0]['companies']) {\r\n          this.nifty50stocks.push({ text1: nestedItems[0][0]['companies'][val].companyShortName, text2: nestedItems[0][0]['companies'][val].change, text3: nestedItems[0][0]['companies'][val].percentChange, text4: nestedItems[0][0]['companies'][val].current,text5:nestedItems[0][0]['companies'][val].symbol })\r\n        }\r\n  \r\n     \r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n   getnifty1yr() {\r\n    \r\n    this.http.get('https://appfeeds.moneycontrol.com/jsonapi/market/graph&format=json&ind_id=9&range=1yr&type=area').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      for (let val in nestedItems[1].values) {\r\n        this.nifty501yrdata.push(nestedItems[1].values[val][\"_value\"])\r\n        this.nifty501yrLabels.push(nestedItems[1].values[val][\"_time\"])\r\n   \r\n      }\r\n  \r\n      this.lineChart1yrData = [{\r\n        label: 'Price',\r\n        data: this.nifty501yrdata,\r\n        borderWidth: 1,\r\n        fill: false\r\n      }];\r\n\r\n      this.lineChart1yrLabels = this.nifty501yrLabels;\r\n    \r\n      \r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n   \r\n   \r\n  }\r\n  trackByFuntion(index, item) {\r\n   // console.log( 'TrackBy:', item.text2, 'at index', index );\r\n    return item.text2\r\n  }\r\n  trackByFuntion1(index1, item1) {\r\n    //console.log( 'TrackBy:', item1.text1, 'at index', index1);\r\n    return item1.text1\r\n   }\r\n  trackByFuntion2(index2, item2) {\r\n    //console.log( 'TrackBy:', item2.text1, 'at index', index2 );\r\n    return item2.text1\r\n   }\r\n  trackByFuntion3(index3, item3) {\r\n    //console.log( 'TrackBy:', item3.text1, 'at index', index3 );\r\n    return item3.text1;\r\n   }\r\n  trackByFuntion4(index4, item4) {\r\n    //console.log( 'TrackBy:', item4.text2, 'at index', index4 );\r\n    item4.text2;\r\n   }\r\n  trackByFuntion5(index5, item5) {\r\n    //console.log( 'TrackBy:', item5.text1, 'at index', index5 );\r\n    return item5.text1;\r\n   }\r\n  trackByFuntion6(index6, item6) {\r\n    //console.log( 'TrackBy:', item6.text1, 'at index', index6 );\r\n     return item6.text1;\r\n   }\r\n  trackByFuntion7(index7, item7) {\r\n    //console.log( 'TrackBy:', item7.text1, 'at index', index7 );\r\n    return item7.text1;\r\n   }\r\n  trackByFuntion8(index8, item8) {\r\n    //console.log( 'TrackBy:', item8.text3, 'at index', index8 );\r\n    return item8.text3 ;\r\n  }\r\n  trackByFuntion9(index9, item9) {\r\n    //console.log( 'TrackBy:', item8.text3, 'at index', index8 );\r\n    return item9.text3 ;\r\n  }\r\n  trackByFuntion10(index10, item10) {\r\n    //console.log( 'TrackBy:', item8.text3, 'at index', index8 );\r\n    return item10.text3 ;\r\n  }\r\n  trackByFuntion11(index11, item11) {\r\n    //console.log( 'TrackBy:', item8.text3, 'at index', index8 );\r\n    return item11.text3 ;\r\n   }\r\n  \r\n\r\n  getnifty6m() {\r\n    this.http.get('https://appfeeds.moneycontrol.com/jsonapi/market/graph&format=json&ind_id=9&range=6m&type=area').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      for (let val in nestedItems[1].values) {\r\n        this.nifty506mdata.push(nestedItems[1].values[val][\"_value\"])\r\n        this.nifty506mLabels.push(nestedItems[1].values[val][\"_time\"])\r\n   \r\n      }\r\n  \r\n\r\n      this.lineChart6mData = [{\r\n        label: 'Price',\r\n        data: this.nifty506mdata,\r\n        borderWidth: 1,\r\n        fill: false\r\n      }];\r\n\r\n      this.lineChart6mLabels = this.nifty506mLabels;\r\n    \r\n      \r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n  \r\n  }\r\n  getnifty3m() {\r\n    this.http.get('https://appfeeds.moneycontrol.com/jsonapi/market/graph&format=json&ind_id=9&range=3m&type=area').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      for (let val in nestedItems[1].values) {\r\n        this.nifty503mdata.push(nestedItems[1].values[val][\"_value\"])\r\n        this.nifty503mLabels.push(nestedItems[1].values[val][\"_time\"])\r\n   \r\n      }\r\n  \r\n\r\n      this.lineChart3mData = [{\r\n        label: 'Price',\r\n        data: this.nifty503mdata,\r\n        borderWidth: 1,\r\n        fill: false\r\n      }];\r\n\r\n      this.lineChart3mLabels = this.nifty503mLabels;\r\n    \r\n     \r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n  \r\n  }\r\n  getnifty5d() {\r\n    this.http.get('https://priceapi.moneycontrol.com/pricefeed/techindicator/W/in%3BNSX?field=RSI').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      \r\n      ////////////To get Nifty 5day Resistances and Indicators/////////////\r\n      \r\n      let val5 = 0;\r\n      while (val5 != 2400) {\r\n        val5 = val5 + 1\r\n        this.lineChartDatan50snrr1w.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r1),\r\n          this.lineChartDatan50snrr2w.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r2),\r\n          this.lineChartDatan50snrr3w.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r3),\r\n          this.lineChartDatan50snrs3w.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s3),\r\n          this.lineChartDatan50snrs2w.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s2),\r\n          this.lineChartDatan50snrs1w.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s1)\r\n      }\r\n   \r\n      this.nifty50crossoverw.length = 0;\r\n      for (let val in nestedItems[2]['crossover']) {\r\n        this.nifty50crossoverw.push({ text1: nestedItems[2]['crossover'][val]['displayValue'], text3: nestedItems[2]['crossover'][val]['indication'], text2: nestedItems[2]['crossover'][val]['period'], text4: nestedItems[2]['crossover'][val]['period'] })\r\n      }\r\n      this.nifty50indicatorsw.length = 0;\r\n      for (let val1 in nestedItems[2]['indicators']) {\r\n        if (nestedItems[2]['indicators'][val1]['id'] != 'bollinger') {\r\n          this.nifty50indicatorsw.push({ text1: nestedItems[2]['indicators'][val1].displayName, text2: nestedItems[2]['indicators'][val1].id, text3: nestedItems[2]['indicators'][val1].indication, text4: nestedItems[2]['indicators'][val1].value })\r\n        }\r\n      }\r\n      \r\n      \r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n     ////////////To get Nifty 1 week Price///////////////////////\r\n      \r\n     this.http.get('https://appfeeds.moneycontrol.com/jsonapi/market/graph&format=json&ind_id=9&range=5d&type=area').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n      \r\n  this.nifty505ddata.length = 0;\r\n  this.nifty505dLabels.length = 0;\r\n  for (let val in nestedItems[1].values) {\r\n    this.nifty505ddata.push(nestedItems[1].values[val][\"_value\"])\r\n    this.nifty505dLabels.push(nestedItems[1].values[val][\"_time\"])\r\n  \r\n  }\r\n \r\n\r\n  this.lineChart5dData = [{\r\n    label: 'Price',\r\n    data: this.nifty505ddata,\r\n    borderWidth: 1,\r\n    fill: false\r\n  }, {\r\n    label: 'R1',\r\n    data: this.lineChartDatan50snrr1w,\r\n    borderWidth: 1,\r\n    bordercolor: '#d3766c',\r\n    fill: false\r\n  },\r\n  {\r\n    label: 'R2',\r\n    data: this.lineChartDatan50snrr2w,\r\n    borderWidth: 1,\r\n    borderColor: '#e3256b',\r\n    fill: false\r\n  }\r\n    , {\r\n    label: 'R3',\r\n    data: this.lineChartDatan50snrr3w,\r\n    borderWidth: 1,\r\n    borderColor: '#c84343',\r\n    fill: false\r\n  }, {\r\n    label: 'S1',\r\n    data: this.lineChartDatan50snrs1w,\r\n    borderWidth: 1,\r\n    borderColor: '#90b590',\r\n    fill: false\r\n  }, {\r\n    label: 'S2',\r\n    data: this.lineChartDatan50snrs2w,\r\n    borderWidth: 1,\r\n    borderColor: '#09c51b',\r\n    fill: false\r\n  }, {\r\n    label: 'S3',\r\n    data: this.lineChartDatan50snrs3w,\r\n    borderWidth: 1,\r\n    borderColor: '#375f00',\r\n    fill: false\r\n  }];\r\n\r\n  this.lineChart5dLabels = this.nifty505dLabels;\r\n \r\n\r\n}, err => {\r\n  console.log(err)\r\n})\r\n \r\n  }  \r\n   \r\n    getnifty1m() {\r\n      this.http.get('https://priceapi.moneycontrol.com/pricefeed/techindicator/M/in%3BNSX?field=RSI').subscribe(data5 => {\r\n        let nestedItems = Object.keys(data5).map(key => {\r\n          return data5[key];\r\n        });\r\n       \r\n        ////////////To get Nifty 1 month Resistances and Indicators/////////////\r\n        this.lineChartDatan50snrr1m.length = 0;\r\n        this.lineChartDatan50snrr2m.length = 0;\r\n        this.lineChartDatan50snrr3m.length = 0;\r\n        this.lineChartDatan50snrs1m.length = 0;\r\n        this.lineChartDatan50snrs2m.length = 0;\r\n        this.lineChartDatan50snrs3m.length = 0;\r\n        let val5 = 0;\r\n        while (val5 != 2000) {\r\n          val5 = val5 + 1\r\n          this.lineChartDatan50snrr1m.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r1),\r\n            this.lineChartDatan50snrr2m.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r2),\r\n            this.lineChartDatan50snrr3m.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r3),\r\n            this.lineChartDatan50snrs3m.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s3),\r\n            this.lineChartDatan50snrs2m.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s2),\r\n            this.lineChartDatan50snrs1m.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s1)\r\n        }\r\n   \r\n        this.nifty50crossoverm.length = 0;\r\n        for (let val in nestedItems[2]['crossover']) {\r\n          this.nifty50crossoverm.push({ text1: nestedItems[2]['crossover'][val]['displayValue'], text3: nestedItems[2]['crossover'][val]['indication'], text2: nestedItems[2]['crossover'][val]['period'], text4: nestedItems[2]['crossover'][val]['period'] })\r\n        }\r\n        this.nifty50indicatorsm.length = 0;\r\n        for (let val1 in nestedItems[2]['indicators']) {\r\n          if (nestedItems[2]['indicators'][val1]['id'] != 'bollinger') {\r\n            this.nifty50indicatorsm.push({ text1: nestedItems[2]['indicators'][val1].displayName, text2: nestedItems[2]['indicators'][val1].id, text3: nestedItems[2]['indicators'][val1].indication, text4: nestedItems[2]['indicators'][val1].value })\r\n          }\r\n        }\r\n       \r\n      }, err => {\r\n        console.log(err)\r\n      })\r\n       \r\n      \r\n     \r\n  \r\n\r\n      ////////////To get Nifty 1 month Price///////////////////////\r\n      \r\n        this.http.get('https://appfeeds.moneycontrol.com/jsonapi/market/graph&format=json&ind_id=9&range=1m&type=area').subscribe(data5 => {\r\n          let nestedItems = Object.keys(data5).map(key => {\r\n            return data5[key];\r\n          });\r\n         \r\n      this.nifty501mdata.length = 0;\r\n      this.nifty501mLabels.length = 0;\r\n      for (let val in nestedItems[1].values) {\r\n        this.nifty501mdata.push(nestedItems[1].values[val][\"_value\"])\r\n        this.nifty501mLabels.push(nestedItems[1].values[val][\"_time\"])\r\n      \r\n      }\r\n     \r\n    \r\n      this.lineChart1mData = [{\r\n        label: 'Price',\r\n        data: this.nifty501mdata,\r\n        borderWidth: 1,\r\n        fill: false\r\n      }, {\r\n        label: 'R1',\r\n        data: this.lineChartDatan50snrr1m,\r\n        borderWidth: 1,\r\n        bordercolor: '#d3766c',\r\n        fill: false\r\n      },\r\n      {\r\n        label: 'R2',\r\n        data: this.lineChartDatan50snrr2m,\r\n        borderWidth: 1,\r\n        borderColor: '#e3256b',\r\n        fill: false\r\n      }\r\n        , {\r\n        label: 'R3',\r\n        data: this.lineChartDatan50snrr3m,\r\n        borderWidth: 1,\r\n        borderColor: '#c84343',\r\n        fill: false\r\n      }, {\r\n        label: 'S1',\r\n        data: this.lineChartDatan50snrs1m,\r\n        borderWidth: 1,\r\n        borderColor: '#90b590',\r\n        fill: false\r\n      }, {\r\n        label: 'S2',\r\n        data: this.lineChartDatan50snrs2m,\r\n        borderWidth: 1,\r\n        borderColor: '#09c51b',\r\n        fill: false\r\n      }, {\r\n        label: 'S3',\r\n        data: this.lineChartDatan50snrs3m,\r\n        borderWidth: 1,\r\n        borderColor: '#375f00',\r\n        fill: false\r\n      }];\r\n   \r\n      this.lineChart1mLabels = this.nifty501mLabels;\r\n    \r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n \r\n  getniftytoday() {\r\n        ////////////To get Nifty Today Price///////////////////////\r\n    \r\n    this.http.get('https://appfeeds.moneycontrol.com/jsonapi/market/graph&format=json&ind_id=9&range=1d&type=area').subscribe(data5 => {\r\n      let nestedItems = Object.keys(data5).map(key => {\r\n        return data5[key];\r\n      });\r\n    \r\n      this.nifty50data.length = 0;\r\n      this.nifty50Labels.length = 0;\r\n      for (let val in nestedItems[1].values) {\r\n        this.nifty50data.push(nestedItems[1].values[val][\"_value\"])\r\n        this.nifty50Labels.push((nestedItems[1].values[val][\"_time\"]))\r\n        this.stockhcdate.push({x:(nestedItems[1].values[val][\"_time\"]),y:(nestedItems[1].values[val][\"_value\"])})     \r\n      }\r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n      this.http.get('https://priceapi.moneycontrol.com/pricefeed/techindicator/D/in%3BNSX?field=RSI').subscribe(data5 => {\r\n        let nestedItems = Object.keys(data5).map(key => {\r\n          return data5[key];\r\n        });\r\n      \r\n        ////////////To get Nifty Today Resistances and Indicators/////////////\r\n        this.lineChartDatan50snrr1.length = 0;\r\n        this.lineChartDatan50snrr2.length = 0;\r\n        this.lineChartDatan50snrr3.length = 0;\r\n        this.lineChartDatan50snrs1.length = 0;\r\n        this.lineChartDatan50snrs2.length = 0;\r\n        this.lineChartDatan50snrs3.length = 0;\r\n   \r\n        let val = 0;\r\n        while (val != 400) {\r\n          val = val + 1\r\n          this.lineChartDatan50snrr1.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r1),\r\n            this.lineChartDatan50snrr2.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r2),\r\n            this.lineChartDatan50snrr3.push(nestedItems[2]['pivotLevels'][0].pivotLevel.r3),\r\n            this.lineChartDatan50snrs3.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s3),\r\n            this.lineChartDatan50snrs2.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s2),\r\n            this.lineChartDatan50snrs1.push(nestedItems[2]['pivotLevels'][0].pivotLevel.s1)\r\n        }\r\n         \r\n        this.nifty50indicators.length = 0;\r\n        this.nifty50crossover.length = 0;\r\n        for (let val in nestedItems[2]['crossover']) {\r\n          this.nifty50crossover.push({ text1: nestedItems[2]['crossover'][val]['displayValue'], text3: nestedItems[2]['crossover'][val]['indication'], text2: nestedItems[2]['crossover'][val]['period'], text4: nestedItems[2]['crossover'][val]['period'] })\r\n        }\r\n         \r\n        for (let val1 in nestedItems[2]['indicators']) {\r\n          if (nestedItems[2]['indicators'][val1]['id'] != 'bollinger') {\r\n            this.nifty50indicators.push({ text1: nestedItems[2]['indicators'][val1].displayName, text2: nestedItems[2]['indicators'][val1].id, text3: nestedItems[2]['indicators'][val1].indication, text4: nestedItems[2]['indicators'][val1].value })\r\n          }\r\n        }\r\n          \r\n        \r\n      \r\n      \r\n     \r\n    \r\n      this.lineChartData = [{\r\n        label: 'Price',\r\n        data: this.nifty50data,\r\n        borderWidth: 1,\r\n        fill: false\r\n      }, \r\n      {\r\n        label: 'R2',\r\n        data: this.lineChartDatan50snrr2,\r\n        borderWidth: 1,\r\n        borderColor: '#e3256b',\r\n        fill: false\r\n      },\r\n      {\r\n        label: 'R1',\r\n        data: this.lineChartDatan50snrr1,\r\n        borderWidth: 1,\r\n        bordercolor: '#d3766c',\r\n        fill: false\r\n      }\r\n        , {\r\n        label: 'R3',\r\n        data: this.lineChartDatan50snrr3,\r\n        borderWidth: 1,\r\n        borderColor: '#c84343',\r\n        fill: false\r\n      }, {\r\n        label: 'S1',\r\n        data: this.lineChartDatan50snrs1,\r\n        borderWidth: 1,\r\n        borderColor: '#90b590',\r\n        fill: false\r\n      }, {\r\n        label: 'S2',\r\n        data: this.lineChartDatan50snrs2,\r\n        borderWidth: 1,\r\n        borderColor: '#09c51b',\r\n        fill: false\r\n      }, {\r\n        label: 'S3',\r\n        data: this.lineChartDatan50snrs3,\r\n        borderWidth: 1,\r\n        borderColor: '#375f00',\r\n        fill: false\r\n      }];\r\n   \r\n      this.lineChartLabels = this.nifty50Labels;\r\n   \r\n   \r\n      \r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n  changestockpage(symbol) {\r\n     \r\n\r\n    this.stockisin = this.stockList.filter(i => i.symbol == symbol)[0].isin\r\n    this.window.open(\"/Share?stock=\" + this.stockisin, \"_blank\")\r\n  }\r\n}\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n ","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NiftyComponent } from './nifty.component';\r\n\r\nconst routes: Routes = [{ path: '', component: NiftyComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class NiftyRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport { NiftyRoutingModule } from './nifty-routing.module';\r\nimport { NiftyComponent } from './nifty.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BaseChartDirective } from 'ng2-charts';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { NgChartsModule } from 'ng2-charts';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { TabViewModule } from \"primeng/tabview\";\r\nimport { ChartModule } from 'primeng/chart';\r\n\r\nimport { of } from 'rxjs'; \r\nimport { map } from 'rxjs/operators';\r\nimport {Observable} from 'rxjs'\r\nimport axios from 'axios';\r\nimport {from} from 'rxjs';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NiftyComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    NiftyRoutingModule,\r\n    FlexLayoutModule,\r\n    NgbModule,\r\n    MatCardModule,\r\n    MatSnackBarModule,\r\n    MatButtonModule,\r\n    NgChartsModule,\r\n    TabViewModule,\r\n    ChartModule,\r\n    BrowserModule\r\n\r\n  ]\r\n})\r\nexport class NiftyModule { }\r\n"],"x_google_ignoreList":[0,1,2]}